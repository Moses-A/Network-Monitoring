#!/usr/bin/env python2
# written by Moses Arocha

import nmap
import optparse

def PortScan(TargetHost, TargetPort):					# The creation of the function, uses the variables TargetHost, TargetPort
	NmapScan = nmap.PortScanner()		# Creates a specific type of scanner from the nmap library, this one is a port scanner
	NmapScan.scan(TargetHost, TargetPort)	# This function grabs the library, then tells it that it is going to use the TargetHost and TargetPort variables
	state = NmapScan[TargetHost]['tcp'][int(TargetPort)]['state']
	print "\n [Results] " + TargetHost + " TCP Port/" +TargetPort + " " + state	# The output the user finally sees, displays if the host, and which ports are open

## The main function grabs the users input, analyzes it to make sure it is valid, then sends the information to the PortScan function ##
def main():
	extensions = optparse.OptionParser('usage%prog -H <Target Host> -P <Target Port>')
	extensions.add_option('-H', '--Host', dest='TargetHost', type='string', help='specify target host')
	extensions.add_option('-P', '--Port',  dest='TargetPort', type='string', help='specify targe port')
	(options, args) = extensions.parse_args()		
	TargetHost = options.TargetHost			
	TargetPorts = str(options.TargetPort).split(',')
	if (TargetHost == None) | (TargetPorts[0] == None):		# Catch all for the parser, if user doesn't insert anything, it tells how to use the program
		print extensions.usage
		exit(0)							# If match is not found in the lists, the code ends
	for TargetPort in TargetPorts:
		PortScan(TargetHost, TargetPort)			# Calls for the PortScan function

if __name__ == '__main__':
	main()
